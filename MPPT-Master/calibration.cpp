#include <Arduino.h>
#include <SPI.h>
#include "MataHari.h"
#include "calibration.h"

#define PD_GAIN 5.8176e-09
#define PD_OFFSET 0.012516
#define CURRENT_GAIN_CH1_G0 2641421770.8879814
float CURRENT_OFFSET_CH1_G0 = 805692.4725212798;
#define CURRENT_GAIN_CH1_G1 5291645391.534684
float CURRENT_OFFSET_CH1_G1 = 1805710.0502549561;
#define CURRENT_GAIN_CH1_G2 10618289286.576778
float CURRENT_OFFSET_CH1_G2 = 4261294.035066784;
#define CURRENT_GAIN_CH1_G3 21291766238.333286
float CURRENT_OFFSET_CH1_G3 = 10005180.721654354;
#define CURRENT_GAIN_CH1_G4 42673121452.882095
float CURRENT_OFFSET_CH1_G4 = 20901976.805980083;
#define CURRENT_GAIN_CH1_G5 85370361610.5934
float CURRENT_OFFSET_CH1_G5 = 42368479.631922804;
#define CURRENT_GAIN_CH1_G6 170760239118.40335
float CURRENT_OFFSET_CH1_G6 = 85350421.40332069;
#define CURRENT_GAIN_CH1_G7 341354966619.42487
float CURRENT_OFFSET_CH1_G7 = 172822999.3269209;
#define CURRENT_GAIN_CH1_G8 677345327219.9363
float CURRENT_OFFSET_CH1_G8 = 349373954.33089405;
#define CURRENT_GAIN_CH1_G9 1360036946121.63
float CURRENT_OFFSET_CH1_G9 = 705686109.7421384;
#define CURRENT_GAIN_CH1_G10 2706262536014.6235
float CURRENT_OFFSET_CH1_G10 = 1429029607.1903594;
#define VOLTAGE_GAIN_CH1 214876860.22916037
#define VOLTAGE_OFFSET_CH1 -26909.217363776275
#define DAC_VOLTAGE_GAIN_CH1 0.001223425018313151
#define DAC_VOLTAGE_OFFSET_CH1 -10.019239516995741
#define CURRENT_GAIN_CH2_G0 2665121804.805726
float CURRENT_OFFSET_CH2_G0 = 1291661.2986034115;
#define CURRENT_GAIN_CH2_G1 5329819455.919002
float CURRENT_OFFSET_CH2_G1 = 2542795.07130725;
#define CURRENT_GAIN_CH2_G2 10659091141.494282
float CURRENT_OFFSET_CH2_G2 = 5040325.1055613505;
#define CURRENT_GAIN_CH2_G3 21317749687.797646
float CURRENT_OFFSET_CH2_G3 = 10091091.547096785;
#define CURRENT_GAIN_CH2_G4 42641760087.47236
float CURRENT_OFFSET_CH2_G4 = 20202567.349953853;
#define CURRENT_GAIN_CH2_G5 85331072779.94101
float CURRENT_OFFSET_CH2_G5 = 40495843.64291111;
#define CURRENT_GAIN_CH2_G6 170394019459.94336
float CURRENT_OFFSET_CH2_G6 = 81406651.95677786;
#define CURRENT_GAIN_CH2_G7 340996458581.9704
float CURRENT_OFFSET_CH2_G7 = 165873744.9783711;
#define CURRENT_GAIN_CH2_G8 680596281911.6223
float CURRENT_OFFSET_CH2_G8 = 335064238.81818265;
#define CURRENT_GAIN_CH2_G9 1346749038240.1355
float CURRENT_OFFSET_CH2_G9 = 681182769.6668546;
#define CURRENT_GAIN_CH2_G10 2720968592786.7915
float CURRENT_OFFSET_CH2_G10 = 1374034442.1441102;
#define VOLTAGE_GAIN_CH2 214867911.1432817
#define VOLTAGE_OFFSET_CH2 -3904.8860931816876
#define DAC_VOLTAGE_GAIN_CH2 0.0012172672005760395
#define DAC_VOLTAGE_OFFSET_CH2 -9.973819748686664
#define CURRENT_GAIN_CH3_G0 2671798599.728594
float CURRENT_OFFSET_CH3_G0 = 1260466.0826511567;
#define CURRENT_GAIN_CH3_G1 5342390882.596015
float CURRENT_OFFSET_CH3_G1 = 2462695.087031589;
#define CURRENT_GAIN_CH3_G2 10684214029.463606
float CURRENT_OFFSET_CH3_G2 = 4874619.329448058;
#define CURRENT_GAIN_CH3_G3 21370485588.021004
float CURRENT_OFFSET_CH3_G3 = 9714090.232653169;
#define CURRENT_GAIN_CH3_G4 42747787687.22659
float CURRENT_OFFSET_CH3_G4 = 19356096.40566329;
#define CURRENT_GAIN_CH3_G5 85519929481.7432
float CURRENT_OFFSET_CH3_G5 = 38943294.09606364;
#define CURRENT_GAIN_CH3_G6 170889766218.54288
float CURRENT_OFFSET_CH3_G6 = 78048765.19128402;
#define CURRENT_GAIN_CH3_G7 341629894774.34125
float CURRENT_OFFSET_CH3_G7 = 158322624.56051707;
#define CURRENT_GAIN_CH3_G8 681397020820.5454
float CURRENT_OFFSET_CH3_G8 = 321923908.91328436;
#define CURRENT_GAIN_CH3_G9 1362170536299.1653
float CURRENT_OFFSET_CH3_G9 = 646700946.4863328;
#define CURRENT_GAIN_CH3_G10 2713412087903.675
float CURRENT_OFFSET_CH3_G10 = 1307972701.6003716;
#define VOLTAGE_GAIN_CH3 214884959.15778005
#define VOLTAGE_OFFSET_CH3 -72360.66817906065
#define DAC_VOLTAGE_GAIN_CH3 0.0012209844963949692
#define DAC_VOLTAGE_OFFSET_CH3 -10.00368366506947
#define CURRENT_GAIN_CH4_G0 2645927847.2133856
float CURRENT_OFFSET_CH4_G0 = 1421673.1153347979;
#define CURRENT_GAIN_CH4_G1 5289999073.787336
float CURRENT_OFFSET_CH4_G1 = 2812900.0591408345;
#define CURRENT_GAIN_CH4_G2 10582185989.419876
float CURRENT_OFFSET_CH4_G2 = 5592872.016481261;
#define CURRENT_GAIN_CH4_G3 21163233450.00204
float CURRENT_OFFSET_CH4_G3 = 11186337.807004038;
#define CURRENT_GAIN_CH4_G4 42345343244.44179
float CURRENT_OFFSET_CH4_G4 = 22295102.513651457;
#define CURRENT_GAIN_CH4_G5 84683517007.35684
float CURRENT_OFFSET_CH4_G5 = 44823697.91831005;
#define CURRENT_GAIN_CH4_G6 169388115768.13205
float CURRENT_OFFSET_CH4_G6 = 90162613.10390888;
#define CURRENT_GAIN_CH4_G7 338004452077.6165
float CURRENT_OFFSET_CH4_G7 = 182103851.68485284;
#define CURRENT_GAIN_CH4_G8 676802344993.5419
float CURRENT_OFFSET_CH4_G8 = 370242508.70320165;
#define CURRENT_GAIN_CH4_G9 1353490641502.1572
float CURRENT_OFFSET_CH4_G9 = 746390027.1115738;
#define CURRENT_GAIN_CH4_G10 2699821721594.856
float CURRENT_OFFSET_CH4_G10 = 1496910573.0001266;
#define VOLTAGE_GAIN_CH4 214878342.39501634
#define VOLTAGE_OFFSET_CH4 -4012.0297365069487
#define DAC_VOLTAGE_GAIN_CH4 0.001222660587111175
#define DAC_VOLTAGE_OFFSET_CH4 -10.017379399936521
#define CURRENT_GAIN_CH5_G0 2671674327.7422533
float CURRENT_OFFSET_CH5_G0 = 1305076.3980324583;
#define CURRENT_GAIN_CH5_G1 5341914944.659381
float CURRENT_OFFSET_CH5_G1 = 2545972.526179807;
#define CURRENT_GAIN_CH5_G2 10685672951.221518
float CURRENT_OFFSET_CH5_G2 = 5025437.657604528;
#define CURRENT_GAIN_CH5_G3 21370051539.725147
float CURRENT_OFFSET_CH5_G3 = 10038162.998665974;
#define CURRENT_GAIN_CH5_G4 42750493775.19258
float CURRENT_OFFSET_CH5_G4 = 20010661.8421469;
#define CURRENT_GAIN_CH5_G5 85509606888.13687
float CURRENT_OFFSET_CH5_G5 = 40294779.133891895;
#define CURRENT_GAIN_CH5_G6 170897365519.0696
float CURRENT_OFFSET_CH5_G6 = 81585396.83618473;
#define CURRENT_GAIN_CH5_G7 341346649189.51776
float CURRENT_OFFSET_CH5_G7 = 165972993.2003532;
#define CURRENT_GAIN_CH5_G8 683040736124.4277
float CURRENT_OFFSET_CH5_G8 = 335314380.252579;
#define CURRENT_GAIN_CH5_G9 1357538267954.1438
float CURRENT_OFFSET_CH5_G9 = 675607289.3741777;
#define CURRENT_GAIN_CH5_G10 2736146020997.4536
float CURRENT_OFFSET_CH5_G10 = 1364771452.455267;
#define VOLTAGE_GAIN_CH5 214867330.28867254
#define VOLTAGE_OFFSET_CH5 128520.47655001697
#define DAC_VOLTAGE_GAIN_CH5 0.001219546845450036
#define DAC_VOLTAGE_OFFSET_CH5 -9.992871770319054
#define CURRENT_GAIN_CH6_G0 2638871862.9397855
float CURRENT_OFFSET_CH6_G0 = 917157.1151727957;
#define CURRENT_GAIN_CH6_G1 5277379440.752162
float CURRENT_OFFSET_CH6_G1 = 1809055.978303523;
#define CURRENT_GAIN_CH6_G2 10553083819.211237
float CURRENT_OFFSET_CH6_G2 = 3617036.8706340455;
#define CURRENT_GAIN_CH6_G3 21109034487.26105
float CURRENT_OFFSET_CH6_G3 = 7249144.840023609;
#define CURRENT_GAIN_CH6_G4 42215113611.77392
float CURRENT_OFFSET_CH6_G4 = 14585412.976986645;
#define CURRENT_GAIN_CH6_G5 84482151076.3851
float CURRENT_OFFSET_CH6_G5 = 29345251.609353602;
#define CURRENT_GAIN_CH6_G6 168730509974.39432
float CURRENT_OFFSET_CH6_G6 = 59419646.87985911;
#define CURRENT_GAIN_CH6_G7 337427521205.35596
float CURRENT_OFFSET_CH6_G7 = 121749521.44785137;
#define CURRENT_GAIN_CH6_G8 673670623008.8137
float CURRENT_OFFSET_CH6_G8 = 247393116.11419195;
#define CURRENT_GAIN_CH6_G9 1346392658490.5125
float CURRENT_OFFSET_CH6_G9 = 507148033.56570905;
#define CURRENT_GAIN_CH6_G10 2699290314468.656
float CURRENT_OFFSET_CH6_G10 = 1030505696.5406687;
#define VOLTAGE_GAIN_CH6 214880506.72213095
#define VOLTAGE_OFFSET_CH6 -140436.67765698934
#define DAC_VOLTAGE_GAIN_CH6 0.001221533108501346
#define DAC_VOLTAGE_OFFSET_CH6 -10.007940995566956
#define CURRENT_GAIN_CH7_G0 2652585709.34221
float CURRENT_OFFSET_CH7_G0 = 1130552.1066994448;
#define CURRENT_GAIN_CH7_G1 5304445543.516414
float CURRENT_OFFSET_CH7_G1 = 2220689.341413624;
#define CURRENT_GAIN_CH7_G2 10610089495.302042
float CURRENT_OFFSET_CH7_G2 = 4390404.02442504;
#define CURRENT_GAIN_CH7_G3 21218577225.57715
float CURRENT_OFFSET_CH7_G3 = 8739642.480963498;
#define CURRENT_GAIN_CH7_G4 42456354118.67969
float CURRENT_OFFSET_CH7_G4 = 17417760.123649333;
#define CURRENT_GAIN_CH7_G5 84955373000.25801
float CURRENT_OFFSET_CH7_G5 = 34826379.920708045;
#define CURRENT_GAIN_CH7_G6 169770524240.8772
float CURRENT_OFFSET_CH7_G6 = 70440918.89309973;
#define CURRENT_GAIN_CH7_G7 339273745858.65967
float CURRENT_OFFSET_CH7_G7 = 143103263.5074365;
#define CURRENT_GAIN_CH7_G8 679013122943.2605
float CURRENT_OFFSET_CH7_G8 = 288837971.73475456;
#define CURRENT_GAIN_CH7_G9 1356511080067.5847
float CURRENT_OFFSET_CH7_G9 = 584806088.326006;
#define CURRENT_GAIN_CH7_G10 2706442489373.4946
float CURRENT_OFFSET_CH7_G10 = 1180027629.8877275;
#define VOLTAGE_GAIN_CH7 214885376.74708265
#define VOLTAGE_OFFSET_CH7 -21105.407844103735
#define DAC_VOLTAGE_GAIN_CH7 0.0012210035383544546
#define DAC_VOLTAGE_OFFSET_CH7 -10.004174648851842
#define CURRENT_GAIN_CH8_G0 2670414262.4491863
float CURRENT_OFFSET_CH8_G0 = 467871.94665581005;
#define CURRENT_GAIN_CH8_G1 5339875221.342472
float CURRENT_OFFSET_CH8_G1 = 907391.2868249926;
#define CURRENT_GAIN_CH8_G2 10681326948.622925
float CURRENT_OFFSET_CH8_G2 = 1762155.797886711;
#define CURRENT_GAIN_CH8_G3 21361150179.713097
float CURRENT_OFFSET_CH8_G3 = 3481498.541416908;
#define CURRENT_GAIN_CH8_G4 42739385069.86073
float CURRENT_OFFSET_CH8_G4 = 6959256.542897652;
#define CURRENT_GAIN_CH8_G5 85486423671.37766
float CURRENT_OFFSET_CH8_G5 = 13968690.931062832;
#define CURRENT_GAIN_CH8_G6 170868991470.747
float CURRENT_OFFSET_CH8_G6 = 28460505.423024077;
#define CURRENT_GAIN_CH8_G7 341214910815.3124
float CURRENT_OFFSET_CH8_G7 = 59143464.26355225;
#define CURRENT_GAIN_CH8_G8 682671574610.4218
float CURRENT_OFFSET_CH8_G8 = 121882344.10060771;
#define CURRENT_GAIN_CH8_G9 1358179060813.2056
float CURRENT_OFFSET_CH8_G9 = 248525459.79374778;
#define CURRENT_GAIN_CH8_G10 2720915125500.8213
float CURRENT_OFFSET_CH8_G10 = 508134682.65382123;
#define VOLTAGE_GAIN_CH8 214791554.03433594
#define VOLTAGE_OFFSET_CH8 -8738417.758155387
#define DAC_VOLTAGE_GAIN_CH8 0.0012232839723982432
#define DAC_VOLTAGE_OFFSET_CH8 -9.982155220232134



#define CURRENT_GAIN_CH9_G0 10694234895.768845
float CURRENT_OFFSET_CH9_G0 = 41758.04239719982;
#define CURRENT_GAIN_CH9_G1 21384732718.756107
float CURRENT_OFFSET_CH9_G1 = 95881.09317839022;
#define CURRENT_GAIN_CH9_G2 42783122402.31803
float CURRENT_OFFSET_CH9_G2 = 199813.09626613706;
#define CURRENT_GAIN_CH9_G3 85579804158.42094
float CURRENT_OFFSET_CH9_G3 = 414507.0420123257;
#define CURRENT_GAIN_CH9_G4 171132101916.11035
float CURRENT_OFFSET_CH9_G4 = 786270.2888133889;
#define CURRENT_GAIN_CH9_G5 342151969878.6829
float CURRENT_OFFSET_CH9_G5 = 1390035.315885074;
#define CURRENT_GAIN_CH9_G6 684222491063.6179
float CURRENT_OFFSET_CH9_G6 = 2269556.463478954;
#define CURRENT_GAIN_CH9_G7 1368485734757.125
float CURRENT_OFFSET_CH9_G7 = 4483999.973512839;
#define CURRENT_GAIN_CH9_G8 2735909682408.5522
float CURRENT_OFFSET_CH9_G8 = 9644714.37280095;
#define CURRENT_GAIN_CH9_G9 5474229153489.419
float CURRENT_OFFSET_CH9_G9 = 20218455.524999406;
#define CURRENT_GAIN_CH9_G10 10956033521437.549
float CURRENT_OFFSET_CH9_G10 = 42582573.845177084;
#define VOLTAGE_GAIN_CH9 214702850.18958905
#define VOLTAGE_OFFSET_CH9 -661290.0226735707
#define DAC_VOLTAGE_GAIN_CH9 0.0012203674658511083
#define DAC_VOLTAGE_OFFSET_CH9 -2.4969525831838504
#define CURRENT_GAIN_CH10_G0 10684350035.052876
float CURRENT_OFFSET_CH10_G0 = -8238.980477050973;
#define CURRENT_GAIN_CH10_G1 21364075794.585068
float CURRENT_OFFSET_CH10_G1 = -5681.504382706034;
#define CURRENT_GAIN_CH10_G2 42743503325.638336
float CURRENT_OFFSET_CH10_G2 = -6666.611893656646;
#define CURRENT_GAIN_CH10_G3 85498201468.07487
float CURRENT_OFFSET_CH10_G3 = 1300.8105333174083;
#define CURRENT_GAIN_CH10_G4 170972913584.6486
float CURRENT_OFFSET_CH10_G4 = -27101.860392839077;
#define CURRENT_GAIN_CH10_G5 341832461262.939
float CURRENT_OFFSET_CH10_G5 = -236953.98539716192;
#define CURRENT_GAIN_CH10_G6 683564253071.2986
float CURRENT_OFFSET_CH10_G6 = -1019186.3131051292;
#define CURRENT_GAIN_CH10_G7 1367165379793.284
float CURRENT_OFFSET_CH10_G7 = -2045317.7091126076;
#define CURRENT_GAIN_CH10_G8 2734090769356.4424
float CURRENT_OFFSET_CH10_G8 = -3523929.431968984;
#define CURRENT_GAIN_CH10_G9 5463088943954.345
float CURRENT_OFFSET_CH10_G9 = -5905497.819469183;
#define CURRENT_GAIN_CH10_G10 10920278182811.436
float CURRENT_OFFSET_CH10_G10 = -10999972.826115265;
#define VOLTAGE_GAIN_CH10 214699535.88685068
#define VOLTAGE_OFFSET_CH10 -829162.6923000852
#define DAC_VOLTAGE_GAIN_CH10 0.0012203341084481049
#define DAC_VOLTAGE_OFFSET_CH10 -2.4968923200038087
#define CURRENT_GAIN_CH11_G0 10696550333.251568
float CURRENT_OFFSET_CH11_G0 = -5068.130489982269;
#define CURRENT_GAIN_CH11_G1 21388719492.33768
float CURRENT_OFFSET_CH11_G1 = 2010.3012911501448;
#define CURRENT_GAIN_CH11_G2 42792401665.850395
float CURRENT_OFFSET_CH11_G2 = 13596.84854917582;
#define CURRENT_GAIN_CH11_G3 85594829841.8597
float CURRENT_OFFSET_CH11_G3 = 39033.81666613179;
#define CURRENT_GAIN_CH11_G4 171167067450.6709
float CURRENT_OFFSET_CH11_G4 = 37971.305282789224;
#define CURRENT_GAIN_CH11_G5 342219862095.8982
float CURRENT_OFFSET_CH11_G5 = -97915.86276524772;
#define CURRENT_GAIN_CH11_G6 684311541364.1841
float CURRENT_OFFSET_CH11_G6 = -725370.0428251483;
#define CURRENT_GAIN_CH11_G7 1368878017204.8645
float CURRENT_OFFSET_CH11_G7 = -1460792.13960796;
#define CURRENT_GAIN_CH11_G8 2737696774034.266
float CURRENT_OFFSET_CH11_G8 = -2351607.6502327435;
#define CURRENT_GAIN_CH11_G9 5473730911764.586
float CURRENT_OFFSET_CH11_G9 = -3827477.1465955433;
#define CURRENT_GAIN_CH11_G10 10950508236787.24
float CURRENT_OFFSET_CH11_G10 = -5397394.179779491;
#define VOLTAGE_GAIN_CH11 214672168.61354262
#define VOLTAGE_OFFSET_CH11 -896536.1749759687
#define DAC_VOLTAGE_GAIN_CH11 0.001220346931181908
#define DAC_VOLTAGE_OFFSET_CH11 -2.4970202933887378
#define CURRENT_GAIN_CH12_G0 10701382160.182539
float CURRENT_OFFSET_CH12_G0 = -65407.30735557069;
#define CURRENT_GAIN_CH12_G1 21398280471.759468
float CURRENT_OFFSET_CH12_G1 = -123137.4685312908;
#define CURRENT_GAIN_CH12_G2 42810587442.70414
float CURRENT_OFFSET_CH12_G2 = -235572.30929429724;
#define CURRENT_GAIN_CH12_G3 85633016868.85172
float CURRENT_OFFSET_CH12_G3 = -466731.31579512666;
#define CURRENT_GAIN_CH12_G4 171238125239.73477
float CURRENT_OFFSET_CH12_G4 = -974373.2693485257;
#define CURRENT_GAIN_CH12_G5 342363665648.109
float CURRENT_OFFSET_CH12_G5 = -2115327.371955408;
#define CURRENT_GAIN_CH12_G6 684625707476.7899
float CURRENT_OFFSET_CH12_G6 = -4774721.257718618;
#define CURRENT_GAIN_CH12_G7 1369654900462.7354
float CURRENT_OFFSET_CH12_G7 = -9638700.192194792;
#define CURRENT_GAIN_CH12_G8 2739526418054.561
float CURRENT_OFFSET_CH12_G8 = -18704301.329124156;
#define CURRENT_GAIN_CH12_G9 5476997358751.97
float CURRENT_OFFSET_CH12_G9 = -36252750.65369693;
#define CURRENT_GAIN_CH12_G10 10961449174617.652
float CURRENT_OFFSET_CH12_G10 = -70354079.00090031;
#define VOLTAGE_GAIN_CH12 214660349.29617473
#define VOLTAGE_OFFSET_CH12 -828257.5009730953
#define DAC_VOLTAGE_GAIN_CH12 0.001220370272692079
#define DAC_VOLTAGE_OFFSET_CH12 -2.497004925131634
#define CURRENT_GAIN_CH13_G0 10697668007.451399
float CURRENT_OFFSET_CH13_G0 = 50441.18923242927;
#define CURRENT_GAIN_CH13_G1 21390944590.729748
float CURRENT_OFFSET_CH13_G1 = 112365.70197996669;
#define CURRENT_GAIN_CH13_G2 42797074037.71733
float CURRENT_OFFSET_CH13_G2 = 226185.83251073107;
#define CURRENT_GAIN_CH13_G3 85603820899.6923
float CURRENT_OFFSET_CH13_G3 = 464629.2967017248;
#define CURRENT_GAIN_CH13_G4 171185357999.03152
float CURRENT_OFFSET_CH13_G4 = 881250.2550733533;
#define CURRENT_GAIN_CH13_G5 342271387699.69684
float CURRENT_OFFSET_CH13_G5 = 1575090.214287154;
#define CURRENT_GAIN_CH13_G6 684415304416.5332
float CURRENT_OFFSET_CH13_G6 = 2612037.694108971;
#define CURRENT_GAIN_CH13_G7 1368954542336.543
float CURRENT_OFFSET_CH13_G7 = 5147872.508223875;
#define CURRENT_GAIN_CH13_G8 2737512096537.2407
float CURRENT_OFFSET_CH13_G8 = 10527317.15362933;
#define CURRENT_GAIN_CH13_G9 5471472827934.797
float CURRENT_OFFSET_CH13_G9 = 22364480.896260507;
#define CURRENT_GAIN_CH13_G10 10950562510088.857
float CURRENT_OFFSET_CH13_G10 = 47742403.599070534;
#define VOLTAGE_GAIN_CH13 214730259.3304576
#define VOLTAGE_OFFSET_CH13 -701090.5807509017
#define DAC_VOLTAGE_GAIN_CH13 0.0012203730254821
#define DAC_VOLTAGE_OFFSET_CH13 -2.4968506743390164
#define CURRENT_GAIN_CH14_G0 10684901668.138771
float CURRENT_OFFSET_CH14_G0 = 20504.031182904826;
#define CURRENT_GAIN_CH14_G1 21364802310.10809
float CURRENT_OFFSET_CH14_G1 = 50342.40835696644;
#define CURRENT_GAIN_CH14_G2 42745012038.64861
float CURRENT_OFFSET_CH14_G2 = 110174.79280348445;
#define CURRENT_GAIN_CH14_G3 85500546045.16092
float CURRENT_OFFSET_CH14_G3 = 236982.003870508;
#define CURRENT_GAIN_CH14_G4 170981486893.78015
float CURRENT_OFFSET_CH14_G4 = 434812.2097901733;
#define CURRENT_GAIN_CH14_G5 341847686348.41064
float CURRENT_OFFSET_CH14_G5 = 649154.0556872956;
#define CURRENT_GAIN_CH14_G6 683559765742.0046
float CURRENT_OFFSET_CH14_G6 = 772933.7839989968;
#define CURRENT_GAIN_CH14_G7 1367548224315.8413
float CURRENT_OFFSET_CH14_G7 = 1489776.8661748616;
#define CURRENT_GAIN_CH14_G8 2734445824733.0117
float CURRENT_OFFSET_CH14_G8 = 3093736.849268571;
#define CURRENT_GAIN_CH14_G9 5467324074640.059
float CURRENT_OFFSET_CH14_G9 = 6617758.401649005;
#define CURRENT_GAIN_CH14_G10 10902626007898.822
float CURRENT_OFFSET_CH14_G10 = 14708095.35559878;
#define VOLTAGE_GAIN_CH14 214712926.44519666
#define VOLTAGE_OFFSET_CH14 -738199.2435083078
#define DAC_VOLTAGE_GAIN_CH14 0.0012203251692012263
#define DAC_VOLTAGE_OFFSET_CH14 -2.496824826646967
#define CURRENT_GAIN_CH15_G0 10691144668.494064
float CURRENT_OFFSET_CH15_G0 = 13700.155835669315;
#define CURRENT_GAIN_CH15_G1 21376964499.83201
float CURRENT_OFFSET_CH15_G1 = 48583.16674012058;
#define CURRENT_GAIN_CH15_G2 42769757922.45482
float CURRENT_OFFSET_CH15_G2 = 116126.93200074855;
#define CURRENT_GAIN_CH15_G3 85551395976.95572
float CURRENT_OFFSET_CH15_G3 = 261883.4652450472;
#define CURRENT_GAIN_CH15_G4 171071077115.93265
float CURRENT_OFFSET_CH15_G4 = 533419.6456479047;
#define CURRENT_GAIN_CH15_G5 342038094064.59686
float CURRENT_OFFSET_CH15_G5 = 943514.0792693679;
#define CURRENT_GAIN_CH15_G6 683919089898.1455
float CURRENT_OFFSET_CH15_G6 = 1369145.091477765;
#define CURRENT_GAIN_CH15_G7 1367947209201.802
float CURRENT_OFFSET_CH15_G7 = 2843842.4109381954;
#define CURRENT_GAIN_CH15_G8 2735471340740.754
float CURRENT_OFFSET_CH15_G8 = 6556082.568232046;
#define CURRENT_GAIN_CH15_G9 5468716409277.683
float CURRENT_OFFSET_CH15_G9 = 14657961.622350737;
#define CURRENT_GAIN_CH15_G10 10920907754351.012
float CURRENT_OFFSET_CH15_G10 = 30483824.071950853;
#define VOLTAGE_GAIN_CH15 214719876.80145702
#define VOLTAGE_OFFSET_CH15 -647411.3498931273
#define DAC_VOLTAGE_GAIN_CH15 0.0012203534616544022
#define DAC_VOLTAGE_OFFSET_CH15 -2.4969087290793697
#define CURRENT_GAIN_CH16_G0 10693525077.86202
float CURRENT_OFFSET_CH16_G0 = 61582.03647957421;
#define CURRENT_GAIN_CH16_G1 21382555853.582108
float CURRENT_OFFSET_CH16_G1 = 133824.17097800304;
#define CURRENT_GAIN_CH16_G2 42779674965.50682
float CURRENT_OFFSET_CH16_G2 = 272444.9567704963;
#define CURRENT_GAIN_CH16_G3 85570783015.3692
float CURRENT_OFFSET_CH16_G3 = 547856.6518048823;
#define CURRENT_GAIN_CH16_G4 171115925769.95065
float CURRENT_OFFSET_CH16_G4 = 1053733.34535859;
#define CURRENT_GAIN_CH16_G5 342127330056.4421
float CURRENT_OFFSET_CH16_G5 = 1891181.182658241;
#define CURRENT_GAIN_CH16_G6 684099813857.8801
float CURRENT_OFFSET_CH16_G6 = 3214283.8396123415;
#define CURRENT_GAIN_CH16_G7 1368360873066.4106
float CURRENT_OFFSET_CH16_G7 = 6463586.788504662;
#define CURRENT_GAIN_CH16_G8 2736971093914.265
float CURRENT_OFFSET_CH16_G8 = 13405541.571971266;
#define CURRENT_GAIN_CH16_G9 5472991445460.253
float CURRENT_OFFSET_CH16_G9 = 28004812.391544342;
#define CURRENT_GAIN_CH16_G10 10956494498976.459
float CURRENT_OFFSET_CH16_G10 = 57290322.35639772;
#define VOLTAGE_GAIN_CH16 214668422.23985416
#define VOLTAGE_OFFSET_CH16 -932936.8937556266
#define DAC_VOLTAGE_GAIN_CH16 0.0012203210661247206
#define DAC_VOLTAGE_OFFSET_CH16 -2.4967123578019397




float getDacVoltageOffset( byte chanId ) {


	switch ( chanId ) {
		case 1:
		return DAC_VOLTAGE_OFFSET_CH1;
		break;
		
		case 2:
		return DAC_VOLTAGE_OFFSET_CH2;
		break;
		
		case 3:
		return DAC_VOLTAGE_OFFSET_CH3;
		break;
		
		case 4:
		return DAC_VOLTAGE_OFFSET_CH4;
		break;
		
		case 5:
		return DAC_VOLTAGE_OFFSET_CH5;
		break;
		
		case 6:
		return DAC_VOLTAGE_OFFSET_CH6;
		break;
		
		case 7:
		return DAC_VOLTAGE_OFFSET_CH7;
		break;
		
		case 8:
		return DAC_VOLTAGE_OFFSET_CH8;
		break;
		
		case 9:
		return DAC_VOLTAGE_OFFSET_CH9;
		break;
		
		case 10:
		return DAC_VOLTAGE_OFFSET_CH10;
		break;
		
		case 11:
		return DAC_VOLTAGE_OFFSET_CH11;
		break;
		
		case 12:
		return DAC_VOLTAGE_OFFSET_CH12;
		break;
		
		case 13:
		return DAC_VOLTAGE_OFFSET_CH13;
		break;
		
		case 14:
		return DAC_VOLTAGE_OFFSET_CH14;
		break;
		
		case 15:
		return DAC_VOLTAGE_OFFSET_CH15;
		break;
		
		case 16:
		return DAC_VOLTAGE_OFFSET_CH16;
		break;
		
	}
}

float getDacVoltageGain( byte chanId ) {


	switch ( chanId ) {
		case 1:
		return DAC_VOLTAGE_GAIN_CH1;
		break;
		
		case 2:
		return DAC_VOLTAGE_GAIN_CH2;
		break;
		
		case 3:
		return DAC_VOLTAGE_GAIN_CH3;
		break;
		
		case 4:
		return DAC_VOLTAGE_GAIN_CH4;
		break;
		
		case 5:
		return DAC_VOLTAGE_GAIN_CH5;
		break;
		
		case 6:
		return DAC_VOLTAGE_GAIN_CH6;
		break;
		
		case 7:
		return DAC_VOLTAGE_GAIN_CH7;
		break;
		
		case 8:
		return DAC_VOLTAGE_GAIN_CH8;
		break;
		
		case 9:
		return DAC_VOLTAGE_GAIN_CH9;
		break;
		
		case 10:
		return DAC_VOLTAGE_GAIN_CH10;
		break;
		
		case 11:
		return DAC_VOLTAGE_GAIN_CH11;
		break;
		
		case 12:
		return DAC_VOLTAGE_GAIN_CH12;
		break;
		
		case 13:
		return DAC_VOLTAGE_GAIN_CH13;
		break;
		
		case 14:
		return DAC_VOLTAGE_GAIN_CH14;
		break;
		
		case 15:
		return DAC_VOLTAGE_GAIN_CH15;
		break;
		
		case 16:
		return DAC_VOLTAGE_GAIN_CH16;
		break;
		
	}
}

float getVoltageOffset( byte chanId ) {


	switch ( chanId ) {
		case 1:
		return VOLTAGE_OFFSET_CH1;
		break;
		
		case 2:
		return VOLTAGE_OFFSET_CH2;
		break;
		
		case 3:
		return VOLTAGE_OFFSET_CH3;
		break;
		
		case 4:
		return VOLTAGE_OFFSET_CH4;
		break;
		
		case 5:
		return VOLTAGE_OFFSET_CH5;
		break;
		
		case 6:
		return VOLTAGE_OFFSET_CH6;
		break;
		
		case 7:
		return VOLTAGE_OFFSET_CH7;
		break;
		
		case 8:
		return VOLTAGE_OFFSET_CH8;
		break;
		
		case 9:
		return VOLTAGE_OFFSET_CH9;
		break;
		
		case 10:
		return VOLTAGE_OFFSET_CH10;
		break;
		
		case 11:
		return VOLTAGE_OFFSET_CH11;
		break;
		
		case 12:
		return VOLTAGE_OFFSET_CH12;
		break;
		
		case 13:
		return VOLTAGE_OFFSET_CH13;
		break;
		
		case 14:
		return VOLTAGE_OFFSET_CH14;
		break;
		
		case 15:
		return VOLTAGE_OFFSET_CH15;
		break;
		
		case 16:
		return VOLTAGE_OFFSET_CH16;
		break;
		
	}
}

float getVoltageGain( byte chanId ) {


	switch ( chanId ) {
		case 1:
		return VOLTAGE_GAIN_CH1;
		break;
		
		case 2:
		return VOLTAGE_GAIN_CH2;
		break;
		
		case 3:
		return VOLTAGE_GAIN_CH3;
		break;
		
		case 4:
		return VOLTAGE_GAIN_CH4;
		break;
		
		case 5:
		return VOLTAGE_GAIN_CH5;
		break;
		
		case 6:
		return VOLTAGE_GAIN_CH6;
		break;
		
		case 7:
		return VOLTAGE_GAIN_CH7;
		break;
		
		case 8:
		return VOLTAGE_GAIN_CH8;
		break;
		
		case 9:
		return VOLTAGE_GAIN_CH9;
		break;
		
		case 10:
		return VOLTAGE_GAIN_CH10;
		break;
		
		case 11:
		return VOLTAGE_GAIN_CH11;
		break;
		
		case 12:
		return VOLTAGE_GAIN_CH12;
		break;
		
		case 13:
		return VOLTAGE_GAIN_CH13;
		break;
		
		case 14:
		return VOLTAGE_GAIN_CH14;
		break;
		
		case 15:
		return VOLTAGE_GAIN_CH15;
		break;
		
		case 16:
		return VOLTAGE_GAIN_CH16;
		break;
		
	}
}
float* getCurrentOffset( byte chanId, int pgaVal ) {
	
	switch ( chanId ) {
		
		case 1:
		switch ( pgaVal ) {
			case 0b00000000: return &CURRENT_OFFSET_CH1_G0; break;
			case 0b00000001: return &CURRENT_OFFSET_CH1_G1; break;
			case 0b00000010: return &CURRENT_OFFSET_CH1_G2; break;
			case 0b00000011: return &CURRENT_OFFSET_CH1_G3; break;
			case 0b00000100: return &CURRENT_OFFSET_CH1_G4; break;
			case 0b00000101: return &CURRENT_OFFSET_CH1_G5; break;
			case 0b00000110: return &CURRENT_OFFSET_CH1_G6; break;
			case 0b00000111: return &CURRENT_OFFSET_CH1_G7; break;
			case 0b00001000: return &CURRENT_OFFSET_CH1_G8; break;
			case 0b00001001: return &CURRENT_OFFSET_CH1_G9; break;

			case 0b00001010: return &CURRENT_OFFSET_CH1_G10; break;
		}
		break;
		
		case 2:
		switch ( pgaVal ) {
			case 0b00000000: return &CURRENT_OFFSET_CH2_G0; break;
			case 0b00000001: return &CURRENT_OFFSET_CH2_G1; break;
			case 0b00000010: return &CURRENT_OFFSET_CH2_G2; break;
			case 0b00000011: return &CURRENT_OFFSET_CH2_G3; break;
			case 0b00000100: return &CURRENT_OFFSET_CH2_G4; break;
			case 0b00000101: return &CURRENT_OFFSET_CH2_G5; break;
			case 0b00000110: return &CURRENT_OFFSET_CH2_G6; break;
			case 0b00000111: return &CURRENT_OFFSET_CH2_G7; break;
			case 0b00001000: return &CURRENT_OFFSET_CH2_G8; break;
			case 0b00001001: return &CURRENT_OFFSET_CH2_G9; break;
						case 0b00001010: return &CURRENT_OFFSET_CH2_G10; break;

		}
		break;
		
		case 3:
		switch ( pgaVal ) {
			case 0b00000000: return &CURRENT_OFFSET_CH3_G0; break;
			case 0b00000001: return &CURRENT_OFFSET_CH3_G1; break;
			case 0b00000010: return &CURRENT_OFFSET_CH3_G2; break;
			case 0b00000011: return &CURRENT_OFFSET_CH3_G3; break;
			case 0b00000100: return &CURRENT_OFFSET_CH3_G4; break;
			case 0b00000101: return &CURRENT_OFFSET_CH3_G5; break;
			case 0b00000110: return &CURRENT_OFFSET_CH3_G6; break;
			case 0b00000111: return &CURRENT_OFFSET_CH3_G7; break;
			case 0b00001000: return &CURRENT_OFFSET_CH3_G8; break;
			case 0b00001001: return &CURRENT_OFFSET_CH3_G9; break;
						case 0b00001010: return &CURRENT_OFFSET_CH3_G10; break;

		}
		break;
		
		case 4:
		switch ( pgaVal ) {
			case 0b00000000: return &CURRENT_OFFSET_CH4_G0; break;
			case 0b00000001: return &CURRENT_OFFSET_CH4_G1; break;
			case 0b00000010: return &CURRENT_OFFSET_CH4_G2; break;
			case 0b00000011: return &CURRENT_OFFSET_CH4_G3; break;
			case 0b00000100: return &CURRENT_OFFSET_CH4_G4; break;
			case 0b00000101: return &CURRENT_OFFSET_CH4_G5; break;
			case 0b00000110: return &CURRENT_OFFSET_CH4_G6; break;
			case 0b00000111: return &CURRENT_OFFSET_CH4_G7; break;
			case 0b00001000: return &CURRENT_OFFSET_CH4_G8; break;
			case 0b00001001: return &CURRENT_OFFSET_CH4_G9; break;
						case 0b00001010: return &CURRENT_OFFSET_CH4_G10; break;

		}
		break;
		
		case 5:
		switch ( pgaVal ) {
			case 0b00000000: return &CURRENT_OFFSET_CH5_G0; break;
			case 0b00000001: return &CURRENT_OFFSET_CH5_G1; break;
			case 0b00000010: return &CURRENT_OFFSET_CH5_G2; break;
			case 0b00000011: return &CURRENT_OFFSET_CH5_G3; break;
			case 0b00000100: return &CURRENT_OFFSET_CH5_G4; break;
			case 0b00000101: return &CURRENT_OFFSET_CH5_G5; break;
			case 0b00000110: return &CURRENT_OFFSET_CH5_G6; break;
			case 0b00000111: return &CURRENT_OFFSET_CH5_G7; break;
			case 0b00001000: return &CURRENT_OFFSET_CH5_G8; break;
			case 0b00001001: return &CURRENT_OFFSET_CH5_G9; break;
						case 0b00001010: return &CURRENT_OFFSET_CH5_G10; break;

		}
		break;
		
		case 6:
		switch ( pgaVal ) {
			case 0b00000000: return &CURRENT_OFFSET_CH6_G0; break;
			case 0b00000001: return &CURRENT_OFFSET_CH6_G1; break;
			case 0b00000010: return &CURRENT_OFFSET_CH6_G2; break;
			case 0b00000011: return &CURRENT_OFFSET_CH6_G3; break;
			case 0b00000100: return &CURRENT_OFFSET_CH6_G4; break;
			case 0b00000101: return &CURRENT_OFFSET_CH6_G5; break;
			case 0b00000110: return &CURRENT_OFFSET_CH6_G6; break;
			case 0b00000111: return &CURRENT_OFFSET_CH6_G7; break;
			case 0b00001000: return &CURRENT_OFFSET_CH6_G8; break;
			case 0b00001001: return &CURRENT_OFFSET_CH6_G9; break;
						case 0b00001010: return &CURRENT_OFFSET_CH6_G10; break;

		}
		break;
		
		case 7:
		switch ( pgaVal ) {
			case 0b00000000: return &CURRENT_OFFSET_CH7_G0; break;
			case 0b00000001: return &CURRENT_OFFSET_CH7_G1; break;
			case 0b00000010: return &CURRENT_OFFSET_CH7_G2; break;
			case 0b00000011: return &CURRENT_OFFSET_CH7_G3; break;
			case 0b00000100: return &CURRENT_OFFSET_CH7_G4; break;
			case 0b00000101: return &CURRENT_OFFSET_CH7_G5; break;
			case 0b00000110: return &CURRENT_OFFSET_CH7_G6; break;
			case 0b00000111: return &CURRENT_OFFSET_CH7_G7; break;
			case 0b00001000: return &CURRENT_OFFSET_CH7_G8; break;
			case 0b00001001: return &CURRENT_OFFSET_CH7_G9; break;
						case 0b00001010: return &CURRENT_OFFSET_CH7_G10; break;

		}
		break;
		
		case 8:
		switch ( pgaVal ) {
			case 0b00000000: return &CURRENT_OFFSET_CH8_G0; break;
			case 0b00000001: return &CURRENT_OFFSET_CH8_G1; break;
			case 0b00000010: return &CURRENT_OFFSET_CH8_G2; break;
			case 0b00000011: return &CURRENT_OFFSET_CH8_G3; break;
			case 0b00000100: return &CURRENT_OFFSET_CH8_G4; break;
			case 0b00000101: return &CURRENT_OFFSET_CH8_G5; break;
			case 0b00000110: return &CURRENT_OFFSET_CH8_G6; break;
			case 0b00000111: return &CURRENT_OFFSET_CH8_G7; break;
			case 0b00001000: return &CURRENT_OFFSET_CH8_G8; break;
			case 0b00001001: return &CURRENT_OFFSET_CH8_G9; break;
						case 0b00001010: return &CURRENT_OFFSET_CH8_G10; break;

		}
		break;
		
		case 9:
		switch ( pgaVal ) {
			case 0b00000000: return &CURRENT_OFFSET_CH9_G0; break;
			case 0b00000001: return &CURRENT_OFFSET_CH9_G1; break;
			case 0b00000010: return &CURRENT_OFFSET_CH9_G2; break;
			case 0b00000011: return &CURRENT_OFFSET_CH9_G3; break;
			case 0b00000100: return &CURRENT_OFFSET_CH9_G4; break;
			case 0b00000101: return &CURRENT_OFFSET_CH9_G5; break;
			case 0b00000110: return &CURRENT_OFFSET_CH9_G6; break;
			case 0b00000111: return &CURRENT_OFFSET_CH9_G7; break;
			case 0b00001000: return &CURRENT_OFFSET_CH9_G8; break;
			case 0b00001001: return &CURRENT_OFFSET_CH9_G9; break;
						case 0b00001010: return &CURRENT_OFFSET_CH9_G10; break;

		}
		break;
		
		case 10:
		switch ( pgaVal ) {
			case 0b00000000: return &CURRENT_OFFSET_CH10_G0; break;
			case 0b00000001: return &CURRENT_OFFSET_CH10_G1; break;
			case 0b00000010: return &CURRENT_OFFSET_CH10_G2; break;
			case 0b00000011: return &CURRENT_OFFSET_CH10_G3; break;
			case 0b00000100: return &CURRENT_OFFSET_CH10_G4; break;
			case 0b00000101: return &CURRENT_OFFSET_CH10_G5; break;
			case 0b00000110: return &CURRENT_OFFSET_CH10_G6; break;
			case 0b00000111: return &CURRENT_OFFSET_CH10_G7; break;
			case 0b00001000: return &CURRENT_OFFSET_CH10_G8; break;
			case 0b00001001: return &CURRENT_OFFSET_CH10_G9; break;
						case 0b00001010: return &CURRENT_OFFSET_CH10_G10; break;

		}
		break;
		
		case 11:
		switch ( pgaVal ) {
			case 0b00000000: return &CURRENT_OFFSET_CH11_G0; break;
			case 0b00000001: return &CURRENT_OFFSET_CH11_G1; break;
			case 0b00000010: return &CURRENT_OFFSET_CH11_G2; break;
			case 0b00000011: return &CURRENT_OFFSET_CH11_G3; break;
			case 0b00000100: return &CURRENT_OFFSET_CH11_G4; break;
			case 0b00000101: return &CURRENT_OFFSET_CH11_G5; break;
			case 0b00000110: return &CURRENT_OFFSET_CH11_G6; break;
			case 0b00000111: return &CURRENT_OFFSET_CH11_G7; break;
			case 0b00001000: return &CURRENT_OFFSET_CH11_G8; break;
			case 0b00001001: return &CURRENT_OFFSET_CH11_G9; break;
						case 0b00001010: return &CURRENT_OFFSET_CH11_G10; break;

		}
		break;
		
		case 12:
		switch ( pgaVal ) {
			case 0b00000000: return &CURRENT_OFFSET_CH12_G0; break;
			case 0b00000001: return &CURRENT_OFFSET_CH12_G1; break;
			case 0b00000010: return &CURRENT_OFFSET_CH12_G2; break;
			case 0b00000011: return &CURRENT_OFFSET_CH12_G3; break;
			case 0b00000100: return &CURRENT_OFFSET_CH12_G4; break;
			case 0b00000101: return &CURRENT_OFFSET_CH12_G5; break;
			case 0b00000110: return &CURRENT_OFFSET_CH12_G6; break;
			case 0b00000111: return &CURRENT_OFFSET_CH12_G7; break;
			case 0b00001000: return &CURRENT_OFFSET_CH12_G8; break;
			case 0b00001001: return &CURRENT_OFFSET_CH12_G9; break;
						case 0b00001010: return &CURRENT_OFFSET_CH12_G10; break;

		}
		break;
		
		case 13:
		switch ( pgaVal ) {
			case 0b00000000: return &CURRENT_OFFSET_CH13_G0; break;
			case 0b00000001: return &CURRENT_OFFSET_CH13_G1; break;
			case 0b00000010: return &CURRENT_OFFSET_CH13_G2; break;
			case 0b00000011: return &CURRENT_OFFSET_CH13_G3; break;
			case 0b00000100: return &CURRENT_OFFSET_CH13_G4; break;
			case 0b00000101: return &CURRENT_OFFSET_CH13_G5; break;
			case 0b00000110: return &CURRENT_OFFSET_CH13_G6; break;
			case 0b00000111: return &CURRENT_OFFSET_CH13_G7; break;
			case 0b00001000: return &CURRENT_OFFSET_CH13_G8; break;
			case 0b00001001: return &CURRENT_OFFSET_CH13_G9; break;
						case 0b00001010: return &CURRENT_OFFSET_CH13_G10; break;

		}
		break;
		
		case 14:
		switch ( pgaVal ) {
			case 0b00000000: return &CURRENT_OFFSET_CH14_G0; break;
			case 0b00000001: return &CURRENT_OFFSET_CH14_G1; break;
			case 0b00000010: return &CURRENT_OFFSET_CH14_G2; break;
			case 0b00000011: return &CURRENT_OFFSET_CH14_G3; break;
			case 0b00000100: return &CURRENT_OFFSET_CH14_G4; break;
			case 0b00000101: return &CURRENT_OFFSET_CH14_G5; break;
			case 0b00000110: return &CURRENT_OFFSET_CH14_G6; break;
			case 0b00000111: return &CURRENT_OFFSET_CH14_G7; break;
			case 0b00001000: return &CURRENT_OFFSET_CH14_G8; break;
			case 0b00001001: return &CURRENT_OFFSET_CH14_G9; break;
						case 0b00001010: return &CURRENT_OFFSET_CH14_G10; break;

		}
		break;
		
		case 15:
		switch ( pgaVal ) {
			case 0b00000000: return &CURRENT_OFFSET_CH15_G0; break;
			case 0b00000001: return &CURRENT_OFFSET_CH15_G1; break;
			case 0b00000010: return &CURRENT_OFFSET_CH15_G2; break;
			case 0b00000011: return &CURRENT_OFFSET_CH15_G3; break;
			case 0b00000100: return &CURRENT_OFFSET_CH15_G4; break;
			case 0b00000101: return &CURRENT_OFFSET_CH15_G5; break;
			case 0b00000110: return &CURRENT_OFFSET_CH15_G6; break;
			case 0b00000111: return &CURRENT_OFFSET_CH15_G7; break;
			case 0b00001000: return &CURRENT_OFFSET_CH15_G8; break;
			case 0b00001001: return &CURRENT_OFFSET_CH15_G9; break;
						case 0b00001010: return &CURRENT_OFFSET_CH15_G10; break;

		}
		break;
		
		case 16:
		switch ( pgaVal ) {
			case 0b00000000: return &CURRENT_OFFSET_CH16_G0; break;
			case 0b00000001: return &CURRENT_OFFSET_CH16_G1; break;
			case 0b00000010: return &CURRENT_OFFSET_CH16_G2; break;
			case 0b00000011: return &CURRENT_OFFSET_CH16_G3; break;
			case 0b00000100: return &CURRENT_OFFSET_CH16_G4; break;
			case 0b00000101: return &CURRENT_OFFSET_CH16_G5; break;
			case 0b00000110: return &CURRENT_OFFSET_CH16_G6; break;
			case 0b00000111: return &CURRENT_OFFSET_CH16_G7; break;
			case 0b00001000: return &CURRENT_OFFSET_CH16_G8; break;
			case 0b00001001: return &CURRENT_OFFSET_CH16_G9; break;
						case 0b00001010: return &CURRENT_OFFSET_CH16_G10; break;

		}
		break;
	}
}
float getCurrentGain( byte chanId, int pgaVal ) {
	
	switch ( chanId ) {
		
		case 1:
		switch ( pgaVal ) {
			case 0b00000000: return CURRENT_GAIN_CH1_G0; break;
			case 0b00000001: return CURRENT_GAIN_CH1_G1; break;
			case 0b00000010: return CURRENT_GAIN_CH1_G2; break;
			case 0b00000011: return CURRENT_GAIN_CH1_G3; break;
			case 0b00000100: return CURRENT_GAIN_CH1_G4; break;
			case 0b00000101: return CURRENT_GAIN_CH1_G5; break;
			case 0b00000110: return CURRENT_GAIN_CH1_G6; break;
			case 0b00000111: return CURRENT_GAIN_CH1_G7; break;
			case 0b00001000: return CURRENT_GAIN_CH1_G8; break;
			case 0b00001001: return CURRENT_GAIN_CH1_G9; break;
						case 0b00001010: return CURRENT_GAIN_CH1_G10; break;

		}
		break;
		
		case 2:
		switch ( pgaVal ) {
			case 0b00000000: return CURRENT_GAIN_CH2_G0; break;
			case 0b00000001: return CURRENT_GAIN_CH2_G1; break;
			case 0b00000010: return CURRENT_GAIN_CH2_G2; break;
			case 0b00000011: return CURRENT_GAIN_CH2_G3; break;
			case 0b00000100: return CURRENT_GAIN_CH2_G4; break;
			case 0b00000101: return CURRENT_GAIN_CH2_G5; break;
			case 0b00000110: return CURRENT_GAIN_CH2_G6; break;
			case 0b00000111: return CURRENT_GAIN_CH2_G7; break;
			case 0b00001000: return CURRENT_GAIN_CH2_G8; break;
			case 0b00001001: return CURRENT_GAIN_CH2_G9; break;
						case 0b00001010: return CURRENT_GAIN_CH2_G10; break;

		}
		break;
		
		case 3:
		switch ( pgaVal ) {
			case 0b00000000: return CURRENT_GAIN_CH3_G0; break;
			case 0b00000001: return CURRENT_GAIN_CH3_G1; break;
			case 0b00000010: return CURRENT_GAIN_CH3_G2; break;
			case 0b00000011: return CURRENT_GAIN_CH3_G3; break;
			case 0b00000100: return CURRENT_GAIN_CH3_G4; break;
			case 0b00000101: return CURRENT_GAIN_CH3_G5; break;
			case 0b00000110: return CURRENT_GAIN_CH3_G6; break;
			case 0b00000111: return CURRENT_GAIN_CH3_G7; break;
			case 0b00001000: return CURRENT_GAIN_CH3_G8; break;
			case 0b00001001: return CURRENT_GAIN_CH3_G9; break;
						case 0b00001010: return CURRENT_GAIN_CH3_G10; break;

		}
		break;
		
		case 4:
		switch ( pgaVal ) {
			case 0b00000000: return CURRENT_GAIN_CH4_G0; break;
			case 0b00000001: return CURRENT_GAIN_CH4_G1; break;
			case 0b00000010: return CURRENT_GAIN_CH4_G2; break;
			case 0b00000011: return CURRENT_GAIN_CH4_G3; break;
			case 0b00000100: return CURRENT_GAIN_CH4_G4; break;
			case 0b00000101: return CURRENT_GAIN_CH4_G5; break;
			case 0b00000110: return CURRENT_GAIN_CH4_G6; break;
			case 0b00000111: return CURRENT_GAIN_CH4_G7; break;
			case 0b00001000: return CURRENT_GAIN_CH4_G8; break;
			case 0b00001001: return CURRENT_GAIN_CH4_G9; break;
			case 0b00001010: return CURRENT_GAIN_CH4_G10; break;
		}
		break;
		
		case 5:
		switch ( pgaVal ) {
			case 0b00000000: return CURRENT_GAIN_CH5_G0; break;
			case 0b00000001: return CURRENT_GAIN_CH5_G1; break;
			case 0b00000010: return CURRENT_GAIN_CH5_G2; break;
			case 0b00000011: return CURRENT_GAIN_CH5_G3; break;
			case 0b00000100: return CURRENT_GAIN_CH5_G4; break;
			case 0b00000101: return CURRENT_GAIN_CH5_G5; break;
			case 0b00000110: return CURRENT_GAIN_CH5_G6; break;
			case 0b00000111: return CURRENT_GAIN_CH5_G7; break;
			case 0b00001000: return CURRENT_GAIN_CH5_G8; break;
			case 0b00001001: return CURRENT_GAIN_CH5_G9; break;
						case 0b00001010: return CURRENT_GAIN_CH5_G10; break;

		}
		break;
		
		case 6:
		switch ( pgaVal ) {
			case 0b00000000: return CURRENT_GAIN_CH6_G0; break;
			case 0b00000001: return CURRENT_GAIN_CH6_G1; break;
			case 0b00000010: return CURRENT_GAIN_CH6_G2; break;
			case 0b00000011: return CURRENT_GAIN_CH6_G3; break;
			case 0b00000100: return CURRENT_GAIN_CH6_G4; break;
			case 0b00000101: return CURRENT_GAIN_CH6_G5; break;
			case 0b00000110: return CURRENT_GAIN_CH6_G6; break;
			case 0b00000111: return CURRENT_GAIN_CH6_G7; break;
			case 0b00001000: return CURRENT_GAIN_CH6_G8; break;
			case 0b00001001: return CURRENT_GAIN_CH6_G9; break;
						case 0b00001010: return CURRENT_GAIN_CH6_G10; break;

		}
		break;
		
		case 7:
		switch ( pgaVal ) {
			case 0b00000000: return CURRENT_GAIN_CH7_G0; break;
			case 0b00000001: return CURRENT_GAIN_CH7_G1; break;
			case 0b00000010: return CURRENT_GAIN_CH7_G2; break;
			case 0b00000011: return CURRENT_GAIN_CH7_G3; break;
			case 0b00000100: return CURRENT_GAIN_CH7_G4; break;
			case 0b00000101: return CURRENT_GAIN_CH7_G5; break;
			case 0b00000110: return CURRENT_GAIN_CH7_G6; break;
			case 0b00000111: return CURRENT_GAIN_CH7_G7; break;
			case 0b00001000: return CURRENT_GAIN_CH7_G8; break;
			case 0b00001001: return CURRENT_GAIN_CH7_G9; break;
						case 0b00001010: return CURRENT_GAIN_CH7_G10; break;

		}
		break;
		
		case 8:
		switch ( pgaVal ) {
			case 0b00000000: return CURRENT_GAIN_CH8_G0; break;
			case 0b00000001: return CURRENT_GAIN_CH8_G1; break;
			case 0b00000010: return CURRENT_GAIN_CH8_G2; break;
			case 0b00000011: return CURRENT_GAIN_CH8_G3; break;
			case 0b00000100: return CURRENT_GAIN_CH8_G4; break;
			case 0b00000101: return CURRENT_GAIN_CH8_G5; break;
			case 0b00000110: return CURRENT_GAIN_CH8_G6; break;
			case 0b00000111: return CURRENT_GAIN_CH8_G7; break;
			case 0b00001000: return CURRENT_GAIN_CH8_G8; break;
			case 0b00001001: return CURRENT_GAIN_CH8_G9; break;
						case 0b00001010: return CURRENT_GAIN_CH8_G10; break;

		}
		break;
		
		case 9:
		switch ( pgaVal ) {
			case 0b00000000: return CURRENT_GAIN_CH9_G0; break;
			case 0b00000001: return CURRENT_GAIN_CH9_G1; break;
			case 0b00000010: return CURRENT_GAIN_CH9_G2; break;
			case 0b00000011: return CURRENT_GAIN_CH9_G3; break;
			case 0b00000100: return CURRENT_GAIN_CH9_G4; break;
			case 0b00000101: return CURRENT_GAIN_CH9_G5; break;
			case 0b00000110: return CURRENT_GAIN_CH9_G6; break;
			case 0b00000111: return CURRENT_GAIN_CH9_G7; break;
			case 0b00001000: return CURRENT_GAIN_CH9_G8; break;
			case 0b00001001: return CURRENT_GAIN_CH9_G9; break;
						case 0b00001010: return CURRENT_GAIN_CH9_G10; break;

		}
		break;
		
		case 10:
		switch ( pgaVal ) {
			case 0b00000000: return CURRENT_GAIN_CH10_G0; break;
			case 0b00000001: return CURRENT_GAIN_CH10_G1; break;
			case 0b00000010: return CURRENT_GAIN_CH10_G2; break;
			case 0b00000011: return CURRENT_GAIN_CH10_G3; break;
			case 0b00000100: return CURRENT_GAIN_CH10_G4; break;
			case 0b00000101: return CURRENT_GAIN_CH10_G5; break;
			case 0b00000110: return CURRENT_GAIN_CH10_G6; break;
			case 0b00000111: return CURRENT_GAIN_CH10_G7; break;
			case 0b00001000: return CURRENT_GAIN_CH10_G8; break;
			case 0b00001001: return CURRENT_GAIN_CH10_G9; break;
						case 0b00001010: return CURRENT_GAIN_CH10_G10; break;

		}
		break;
		
		case 11:
		switch ( pgaVal ) {
			case 0b00000000: return CURRENT_GAIN_CH11_G0; break;
			case 0b00000001: return CURRENT_GAIN_CH11_G1; break;
			case 0b00000010: return CURRENT_GAIN_CH11_G2; break;
			case 0b00000011: return CURRENT_GAIN_CH11_G3; break;
			case 0b00000100: return CURRENT_GAIN_CH11_G4; break;
			case 0b00000101: return CURRENT_GAIN_CH11_G5; break;
			case 0b00000110: return CURRENT_GAIN_CH11_G6; break;
			case 0b00000111: return CURRENT_GAIN_CH11_G7; break;
			case 0b00001000: return CURRENT_GAIN_CH11_G8; break;
			case 0b00001001: return CURRENT_GAIN_CH11_G9; break;
						case 0b00001010: return CURRENT_GAIN_CH11_G10; break;

		}
		break;
		
		case 12:
		switch ( pgaVal ) {
			case 0b00000000: return CURRENT_GAIN_CH12_G0; break;
			case 0b00000001: return CURRENT_GAIN_CH12_G1; break;
			case 0b00000010: return CURRENT_GAIN_CH12_G2; break;
			case 0b00000011: return CURRENT_GAIN_CH12_G3; break;
			case 0b00000100: return CURRENT_GAIN_CH12_G4; break;
			case 0b00000101: return CURRENT_GAIN_CH12_G5; break;
			case 0b00000110: return CURRENT_GAIN_CH12_G6; break;
			case 0b00000111: return CURRENT_GAIN_CH12_G7; break;
			case 0b00001000: return CURRENT_GAIN_CH12_G8; break;
			case 0b00001001: return CURRENT_GAIN_CH12_G9; break;
						case 0b00001010: return CURRENT_GAIN_CH12_G10; break;

		}
		break;
		
		case 13:
		switch ( pgaVal ) {
			case 0b00000000: return CURRENT_GAIN_CH13_G0; break;
			case 0b00000001: return CURRENT_GAIN_CH13_G1; break;
			case 0b00000010: return CURRENT_GAIN_CH13_G2; break;
			case 0b00000011: return CURRENT_GAIN_CH13_G3; break;
			case 0b00000100: return CURRENT_GAIN_CH13_G4; break;
			case 0b00000101: return CURRENT_GAIN_CH13_G5; break;
			case 0b00000110: return CURRENT_GAIN_CH13_G6; break;
			case 0b00000111: return CURRENT_GAIN_CH13_G7; break;
			case 0b00001000: return CURRENT_GAIN_CH13_G8; break;
			case 0b00001001: return CURRENT_GAIN_CH13_G9; break;
						case 0b00001010: return CURRENT_GAIN_CH13_G10; break;

		}
		break;
		
		case 14:
		switch ( pgaVal ) {
			case 0b00000000: return CURRENT_GAIN_CH14_G0; break;
			case 0b00000001: return CURRENT_GAIN_CH14_G1; break;
			case 0b00000010: return CURRENT_GAIN_CH14_G2; break;
			case 0b00000011: return CURRENT_GAIN_CH14_G3; break;
			case 0b00000100: return CURRENT_GAIN_CH14_G4; break;
			case 0b00000101: return CURRENT_GAIN_CH14_G5; break;
			case 0b00000110: return CURRENT_GAIN_CH14_G6; break;
			case 0b00000111: return CURRENT_GAIN_CH14_G7; break;
			case 0b00001000: return CURRENT_GAIN_CH14_G8; break;
			case 0b00001001: return CURRENT_GAIN_CH14_G9; break;
						case 0b00001010: return CURRENT_GAIN_CH14_G10; break;

		}
		break;
		
		case 15:
		switch ( pgaVal ) {
			case 0b00000000: return CURRENT_GAIN_CH15_G0; break;
			case 0b00000001: return CURRENT_GAIN_CH15_G1; break;
			case 0b00000010: return CURRENT_GAIN_CH15_G2; break;
			case 0b00000011: return CURRENT_GAIN_CH15_G3; break;
			case 0b00000100: return CURRENT_GAIN_CH15_G4; break;
			case 0b00000101: return CURRENT_GAIN_CH15_G5; break;
			case 0b00000110: return CURRENT_GAIN_CH15_G6; break;
			case 0b00000111: return CURRENT_GAIN_CH15_G7; break;
			case 0b00001000: return CURRENT_GAIN_CH15_G8; break;
			case 0b00001001: return CURRENT_GAIN_CH15_G9; break;
						case 0b00001010: return CURRENT_GAIN_CH15_G10; break;

		}
		break;
		
		case 16:
		switch ( pgaVal ) {
			case 0b00000000: return CURRENT_GAIN_CH16_G0; break;
			case 0b00000001: return CURRENT_GAIN_CH16_G1; break;
			case 0b00000010: return CURRENT_GAIN_CH16_G2; break;
			case 0b00000011: return CURRENT_GAIN_CH16_G3; break;
			case 0b00000100: return CURRENT_GAIN_CH16_G4; break;
			case 0b00000101: return CURRENT_GAIN_CH16_G5; break;
			case 0b00000110: return CURRENT_GAIN_CH16_G6; break;
			case 0b00000111: return CURRENT_GAIN_CH16_G7; break;
			case 0b00001000: return CURRENT_GAIN_CH16_G8; break;
			case 0b00001001: return CURRENT_GAIN_CH16_G9; break;
			case 0b00001010: return CURRENT_GAIN_CH16_G10; break;

		}
		break;
	}
}

float calibrationPD( int32_t codeVal, int pdnum ) {

	return ( (float) ( codeVal ) ) * PD_GAIN + PD_OFFSET;
}

